macros = [
    {}
]
arguments = [
    { name = "early_on_interval", label = "Early ON Interval", description = "The time in milliseconds IGN ON.", type = "integer", min = "0", max = "4294967295" },
    { name = "on_interval", label = "ON Interval", description = "The period in milliseconds which IGN is ON.", type = "integer", min = "0", min = "0", max = "4294967295" },
    { name = "report_index", label = "Report Index", description = "The integer which turns the io output HIGH.", type = "integer", min = "0", max = "4294967295" },
    { name = "sleep_profile", label = "Sleep Profile", description = "The integer which turns the io output HIGH.", type = "integer", min = "0", max = "4294967295" },
    { name = "delay_interval", label = "Delay Interval", description = "The time in milliseconds needed to wait before sending the report.", type = "integer", min = "0", max = "4294967295" },
    { name = "off_interval", label = "OFF Interval", description = "The integer which turns the io output HIGH.", type = "integer", min = "0", max ="9223372036854775808" }
]
lines = [
    # Begin IGN ON periodic.
    ["power.power_or_wake_up.0", "", "timer.after.^early_on.$early_on_interval"],
    ["io.input_high.0", "not timer.active.^on", "timer.every.^on.$on_interval"],
    ["io.input_high.1", "not timer.active.^on", "timer.every.^on.$on_interval"],

    # Handle periodic message.
    ["timer.expired.^early_on", "", "report.send.$report_index"],
    ["timer.expired.^on", "", "report.send.$report_index"],

    # Cancel IGN ON periodic.
    ["io.input_low.0", "io.is_low.1", "timer.cancel.^early_on"],
    ["io.input_low.1", "io.is_low.0", "timer.cancel.^early_on"],

    ["io.input_low.0", "io.is_low.1", "timer.cancel.^on"],
    ["io.input_low.1", "io.is_low.0", "timer.cancel.^on"],

    # Handle IGN OFF periodic message.
    # Reset sleep delay if we are in a sleep profile already
    ["cron.expired.^off", "power.is_current_profile.$sleep_profile", "power.apply_profile.$sleep_profile"],
    ["cron.expired.^off", "", "timer.after.^delay.$delay_interval"],
    ["timer.expired.^delay", "", "report.send.$report_index"],

    # Begin IGN OFF periodic.
    ["power.power_up.0", "io.is_low.0 and io.is_low.1", "cron.wake_every.^off.$off_interval"],
    ["io.input_low.0", "io.is_low.1 and not cron.active.^off", "cron.wake_every.^off.$off_interval"],
    ["io.input_low.1", "io.is_low.0 and not cron.active.^off", "cron.wake_every.^off.$off_interval"],

    # Cancel IGN OFF periodic.
    ["io.input_high.0", "", "cron.cancel.^off"],
    ["io.input_high.1", "", "cron.cancel.^off"],
    ["io.input_high.0", "", "timer.cancel.^delay"],
    ["io.input_high.1", "", "timer.cancel.^delay"],


# TODO: Rewrite block as generic one once we have a module resembling a relay.
    # # Begin IGN-ON periodic
    # ["$on_event", "not timer.active.^on", "timer.after.^early_on.$early_on_interval"],
    # ["$on_event", "not timer.active.^on", "timer.every.^on.$on_interval"],

    # # Handle periodic message.
    # ["timer.expired.^early_on", "", "report.send.$periodic_msg"],
    # ["timer.expired.^on", "", "report.send.$periodic_msg"],

    # # Cancel IGN-ON periodic
    # ["$off_event", "", "timer.cancel.^early_on"],
    # ["$off_event", "", "timer.cancel.^on"]
]
