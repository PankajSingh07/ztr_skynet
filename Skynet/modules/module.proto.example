syntax = "proto3";

// The package name needs to be an underscore followed by the UUID in ASCII hex.
package mod_339248087cbc49c0bf74f8915893573d;

enum Allocator {
  // This needs to be here as a zero value.
  DO_NOT_REMOVE = 0;

  // A module can inform the module's config compiler of whether it allows a
  // dynamically allocated resource by specifying the name VALUE with an
  // appropriate identifier.
  //
  // A VALUE of 1 means the module does not support a dynamic resource.
  //
  // A VALUE of 2 means the module does support a dynamic resource, but should
  // not encode the final count in the static configuration.
  //
  // A VALUE of 3 means the module does support a dynamic resource, and that
  // an entry called `resource_count` should be created and encoded in the
  // static configuration with the number of resources.
  VALUE = 3;
};

// Below we need to define the possible codes supported by the module. Each
// entry should use SCREAMING_SNAKE_CASE and will map to a lower_snake_case name
// in the module's toml config.
//
// Standard length events, filters, and actions may have a code and signal.
// Extended events, filters, and actions may have a code, signal, and modifier.
//
// If one of these enums needs to be empty (not required or supported by the
// module) then it should be deleted from the proto, otherwise the protobuf
// compiler will complain.

enum StandardEventCodes {
  THING_HAPPENED = 0;
};

enum ExtendedEventCodes {
  EXCITING_THING_HAPPENED = 0;
};

enum StandardFilterCodes {
  IS_SILLY = 0;
};

enum ExtendedFilterCodes {
  IS_REALLY_SILLY = 0;
};

enum StandardActionCodes {
  DO_SOMETHING = 0;
};

enum ExtendedActionCodes {
  DO_SOMETHING_COOL = 0;
};

// This is the static configuration sent to the device when this module is
// present in a config. It is what the module source may read to define its
// behaviour.
message Config {
  // Because we specified above that this resource can allocate and should
  // encode the count (VALUE == 3) we need an entry in the Config message with
  // this exact name to receive that count.
  int32 resource_count = 1;

  // The rest of the config goes here...
};
