syntax = "proto3";

package mod_e85bf76ea1cb449a8fcbfec5da8b50fb;

enum Allocator {
  // This needs to be here as a zero value.
  DO_NOT_REMOVE = 0;
  VALUE = 1;
};

enum StandardEventCodes {
  // Signal: Index into the repeated change of state field.
  COS = 0;

  // Signal: Index into repeated thresholds field.
  BELOW_THRESHOLD = 1;

  // Signal: Index into the repeated threshold field.
  ABOVE_OR_EQUAL_THRESHOLD = 2;

  // Signal: N/A.
  CONNECTED = 3;

  // Signal: N/A.
  DISCONNECTED = 4;

  // Signal: N/A.
  FAULT_STATUS_UPDATE = 5;
};


enum StandardFilterCodes {
  // Signal: Index into the repeated threshold field.
  IS_BELOW_THRESHOLD = 0;

  // Signal: Index into the repeated threshold field.
  IS_ABOVE_OR_EQUAL_THRESHOLD = 1;

  // Signal: N/A.
  IS_CONNECTED = 2;

  // Signal: N/A.
  IS_ENABLED = 3;
};

enum StandardActionCodes {
  // Signal: Index into the repeated write profile.
  WRITE = 0;

  // Signal: N/A.
  ENABLE = 1;

  // Signal: N/A.
  DISABLE = 2;

  // Signal: N/A.
  RESET_CAN = 3;
};

message Config {
  message Raw {
    // Pgn id that will be added to the raw list.
    uint32 id = 1;

    // Source address for the desired raw pgn.
    uint32 address = 2;
  };

  message Request {
    // Pgn id of the desired request pgn.
    uint32 id = 1;
  };

  message Datapoint {
    // The id of the pgn for this given datapoint.
    uint32 id = 1;

    // Zero-based offset of where to begin processing the datapoint.
    uint32 offset = 2;

    // Length of the datapoint in bytes.
    uint32 length = 3;
  };

  message Cos {
    // Submessage contatining all datapoint meta information.
    Datapoint datapoint = 1;

    // Mask used to determine if a change has occurred.
    bytes bitmask = 2;
  };

  message Threshold {
    // Submessage contatining all datapoint meta information.
    Datapoint datapoint = 1;

    // Threshold of the pgn data.
    uint64 value = 2; 
  };

  message Write {
    // Pgn that will be written to.
    uint32 id = 1;
    
    // Length of writes to be done for the given request.
    uint32 expire_time_s = 2;

    // Data to write for this pgn.
    bytes content = 3;
  };

  enum BaudRate {
    // Slow rate (250 KBPS).
    LOW = 0;

    // Fast rate (500 KBPS).
    HIGH = 1;
  };

  enum Pdu1 {
    // Enable the Pdu1 PGN Mask.
    ENABLE = 0;

    // Disable the Pdu1 PGN Mask.
    DISABLE = 1;
  };

  repeated Raw raw = 1;
  repeated Request request = 2;
  repeated Cos change_of_state = 3;
  repeated Threshold thresholds = 4;
  repeated Write writes = 5;

  // Speed to communicate with the can bus.
  BaudRate baud_rate = 6;

  // Protocol Data Units message format.
  Pdu1 pdu = 7;
};
