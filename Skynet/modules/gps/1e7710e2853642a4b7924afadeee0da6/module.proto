syntax = "proto3";

package mod_1e7710e2853642a4b7924afadeee0da6;

enum Allocator {
  // This needs to be here as a zero value.
  DO_NOT_REMOVE = 0;
  VALUE = 1;
};

enum StandardEventCodes {
  // Signal: N/A.
  FIX_ACQUIRED = 0;

  // Signal: N/A.
  FIX_LOST = 1;

  // Signal: FixType config enum value for fix state.
  FIX_STATE_CHANGE = 2;

  // Signal: The index of the threshold which was crossed.
  ABOVE_OR_EQUAL_SPEED_THRESHOLD = 3;

  // Signal: The index of the threshold which was crossed.
  BELOW_SPEED_THRESHOLD = 4;

  // Signal: 0 for no correction data, 1 for correction data.
  DIFFERENTIAL_CORRECTION_STATUS = 5;
};

enum StandardFilterCodes {
  // Signal: N/A.
  HAS_FIX = 0;

  // Signal: FixType config enum value for fix state being tested.
  IS_FIX_TYPE = 1;

  // Signal: FixQualityType config enum value for quality being tested.
  IS_FIX_QUALITY_ABOVE_OR_EQUAL = 2;

  // Signal: The index of the threshold being tested.
  IS_ABOVE_OR_EQUAL_SPEED_THRESHOLD = 3;

  // Signal: The index of the threshold being tested.
  IS_BELOW_SPEED_THRESHOLD = 4;

  // Signal: N/A.
  DIFFERENTIALLY_CORRECTED = 5;
};

message Config {
  enum FixType {
    NO_FIX = 0;
    DEAD_RECKONING_FIX = 1;
    FIX_2D = 2;
    FIX_3D = 3;
    GNSS_FIX = 4;
    TIME_ONLY_FIX = 5;
    INVALID = 6;
  };

  // @warning Must be in ascending order of quality.
  enum FixQualityType {
    POOR = 0;
    FAIR = 1;
    MODERATE = 2;
    GOOD = 3;
    EXCELLENT = 4;
    IDEAL = 5;
  };

  enum DynamicModel {
    PORTABLE = 0;
    STATIONARY = 1;
    PEDESTRIAN = 2;
    AUTOMOTIVE= 3;
    SEA = 4;
    AIRBORNE_1G_OR_LESS = 5;
    AIRBORNE_2G_OR_LESS = 6;
    AIRBORNE_4G_OR_LESS = 7;
  };

  // Prevents positional changes when the speed is below this threshold in km/h.
  uint32 static_hold_threshold_kmh = 1;

  // Set the dynamic platform model used for smoother results depending on type of expected motion.
  DynamicModel dynamic_model = 2;

  // A list of speed thresholds in km/h to use in the events/filters.
  repeated uint32 speed_thresholds_kmh = 3;
}
