syntax = "proto3";

// The package name needs to be an underscore followed by the UUID in ASCII hex.
package mod_22fabc9d7dd24c699ca62848865cce83;

enum Allocator {
  // This needs to be here as a zero value.
  DO_NOT_REMOVE = 0;
  VALUE = 1;
};

enum StandardEventCodes {
  // Signal: N/A.
  CONNECTED = 0;

  // Signal: N/A.
  DISCONNECTED = 1;

  // Signal: N/A.
  COMMUNICATION_ERROR = 2;

  // Signal: Index of the datapoint that changed state.
  COS = 3;

  // Signal: Index of the datapoint that went below threshold.
  BELOW_THRESHOLD = 4;

  // Signal: Index of the datapoint that went above (or equal) to threshold.
  ABOVE_OR_EQUAL_THRESHOLD = 5;
};

enum StandardFilterCodes {
  // Signal: N/A.
  IS_CONNECTED = 0;
  
  // Signal: The datapoint ID of the threshold.
  IS_BELOW_THRESHOLD = 1;

  // Signal: The datapoint ID of the threshold.
  IS_ABOVE_OR_EQUAL_THRESHOLD = 2;
};

enum StandardActionCodes {
  // Signal: Index of the configured write address.
  WRITE = 0;
};

// This is the static configuration sent to the device when this module is
// present in a config. It is what the module source may read to define its
// behaviour.
message Config {
  // Describes a modbus block of registers or discretes.
  message Block {
    // Describes the registers this block is referencing.
    enum EntityType {
      // Modbus coils.
      COILS = 0;

      // Modbus inputs.
      INPUTS = 1;

      // Input registers.
      INPUT_REGISTERS = 3;

      // Holding registers.
      HOLDING_REGISTERS = 4;
    };

    // The modbus slave address.
    uint32 slave_address = 1;

    // The the object type of this block.
    EntityType entity_type = 2;

    // The modbus entity adddress (0-65535).
    uint32 entity_address = 3;

    // The number of modbus bits / registers to read.
    uint32 length = 4;
  };

  // Describes a group of blocks.
  message Snapshot {
    // The unique id of the snapshot.
    uint32 id = 1;

    // The blocks configured with this snapshot group.
    repeated Block blocks = 2;
  };

  // A datapoint represents a value we can attach processing and/or events to.
  message Datapoint {
    // Describes the type of value in the datapoint.
    enum Type {
      // Interpret the datapoint as a raw value.
      RAW = 0;

      // Interpret the datapoint as a minimum value.
      MIN = 1;

      // Interpret the datapoint as a maximum value.
      MAX = 2;

      // Interpret the datapoint as an average value.
      AVG = 3;
    };

    // Describes how we parse the datapoint value.
    enum Encoding {
      // The datapoint is encoded as big endian.
      BIG_ENDIAN = 0;

      // The datapoint is encoded as little endian.
      LITTLE_ENDIAN = 1;

      // The datapoint is encoded per the saver application.
      SAVER = 2;
    };

    // Describes the optional signed threshold parameters.
    message SignedThreshold {
      // Enables a signed threshold.
      bool enabled = 1;

      // Signed threshold value.
      int64 value = 2;
    };

    // Describes the optional unsigned threshold parameters.
    message UnsignedThreshold {
      // Enables an unsigned threshold.
      bool enabled = 1;

      // Unsigned threshold value.
      uint64 value = 2;
    }

    // The unique id of the datapoint.
    uint32 id = 1;

    // The datapoint type.
    Type type = 2;

    // The datapoint encoding.
    Encoding encoding = 3;

    // The datapoint modbus block.
    Block block = 4;

    // A change of state trigger option for the datapoint.
    uint64 cos_bitmask = 5;

    // Optional configuration of a signed threshold.
    SignedThreshold signed_threshold = 6;

    // Optional configuration of an unsigned threshold.
    UnsignedThreshold unsigned_threshold = 7;
  };

  // Describes a statically configured, triggerable, write.
  message Write {
    // The address to write to.
    Block block = 1;

    // The register values to write.
    repeated uint32 registers = 2;
  };

  // The different parity configurations.
  enum Parity {
    NONE = 0;
    EVEN = 1;
    ODD = 2;
  };

  // The different data bit configurations.
  enum DataBits {
    EIGHT = 0;
    SEVEN = 1;
  };

  // The different stop bit configurations.
  enum StopBits {
    ONE = 0;
    TWO = 1;
  };

  // Select the hardware interface being used.
  enum Interface {
    RS232 = 0;
    RS485 = 1;
  };

  // The baud rate to be used for serial communications.
  uint64 baud_rate = 1;

  // The parity setting to be used for serial communications.
  Parity parity = 2;

  // The data bits to be used for serial communications.
  DataBits data_bits = 3;

  // The stop bits to be used for serial communications.
  StopBits stop_bits = 4;

  // The hardware interface to be used for serial communications.
  Interface interface = 5;

  // The number of retries allowed for a modbus request.
  uint32 request_retries = 6;
  
  // The timeout for a modbus request in milliseconds.
  uint32 request_timeout_ms = 7;

  // The periodic interval for modbus reads in seconds.
  uint32 scan_rate_s = 8;

  // Blocks of configurable data for retrieval from the modbus subsystem.
  repeated Snapshot snapshots = 9;

  // Modbus data which can be configured for processing by the modbus subsys.
  repeated Datapoint datapoints = 10;

  // Statically configured modbus writes which can be triggered by EDD.
  repeated Write writes = 11;
};
